function stop() {
            let stream = document.getElementById('video').srcObject;
            let tracks = stream.getTracks();

            tracks.forEach(function (track) {
                track.stop();
            });

            document.getElementById('video').srcObject = null;
        }
        //开启摄像头
        function getMedia() {
            base64 = 1;
            $("#video").show();
            let constraints = {
                video: {},
                audio: true
            };
            //获得video摄像头区域
            let video = document.getElementById("video");
            //这里介绍新的方法，返回一个 Promise对象
            // 这个Promise对象返回成功后的回调函数带一个 MediaStream 对象作为其参数
            // then()是Promise对象里的方法
            // then()方法是异步执行，当then()前的方法执行完后再执行then()内部的程序
            // 避免数据没有获取到
            let promise = navigator.mediaDevices.getUserMedia(constraints);
            promise.then(function (MediaStream) {
                video.srcObject = MediaStream;

                video.play();
            });
        }
        function takePhoto() {
            //获得Canvas对象
            let video = document.getElementById("video");
            let canvas = document.getElementById("canvas");
            let ctx = canvas.getContext('2d');
            ctx.drawImage(video, -100, 0, 800, 500);

            $("#头像文件名").prop("src", canvas.toDataURL());
        }
        $("#img_upload").on("change", function () {

            console.log($("#img_upload").val())
            var preview = $("#头像文件名");
            var file = $("#img_upload")[0].files[0];
            var reader = new FileReader();
            reader.addEventListener("load", function () {
                console.log(reader.result)
                preview.prop("src", reader.result);
            }, false);
            if (file) {
                reader.readAsDataURL(file);
            }
        });